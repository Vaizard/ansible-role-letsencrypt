---
# tasks file for roles/letsencrypt
- name: "Including distro-specific variables"
  include_vars: "vars_{{ ansible_distribution }}.yml"

- name: "Making sure required packages are installed for {{ ansible_distribution }}"
  include: "setup_{{ ansible_distribution }}.yml"
  when: ansible_distribution in [ 'Ubuntu', 'Gentoo' ]

- name: "Making sure required directories are present"
  file: dest={{ item }} state=directory
  with_items:
      - "{{ letsencrypt_path }}"
      - "{{ letsencrypt_webroot }}"
      - "/etc/ssl/private"

- name: "Making sure the dhparam file is present"
  command: openssl dhparam -out /etc/ssl/private/dhparams.pem "{{ dhparam_size }}" creates=/etc/ssl/private/dhparams.pem

- name: "Cloning certbot (letsencrypt)"
  git: repo=https://github.com/certbot/certbot.git dest="{{ letsencrypt_path }}" force=yes

- name: "Geting list of domains in certificate (if any)"
  shell: "openssl x509 -text < /etc/letsencrypt/live/{{ item.domains[0] }}/cert.pem|grep DNS|tr -d ' '|tr ',' '\n'|cut -d ':' -f 2"
  failed_when: false
  changed_when: false
  always_run: yes
  with_items: "{{ letsencrypt }}"
  register: dns_info
  tags: dontgen

- name: "Checking if server listens on port 80"
  shell: 'netstat -tunlp | grep ":80 "'
  failed_when: false
  changed_when: check_80.rc == 1
  register: check_80
  always_run: yes
  tags: dontgen

- name: "Checking if server listens on port 443"
  shell: 'netstat -tunlp | grep ":443 "'
  failed_when: false
  changed_when: check_443.rc == 1
  register: check_443
  always_run: yes
  tags: dontgen
  
# When certificate is created for multiple (SAN) domains the first domain name is used as path for key and certs. 
# Let's check the list of DNS names for the cert by the first domain (if any)
#
# - letsencrypt: array of domains you want to have a letsencrypt certificate (see README for examples)
# - generation_indexes: empty array, will contain domains to be appended to the letsencrypt certs
# - san_dict: an  item of the letsencrypt array
# - i: loop index in the letsencrypt array
# - domain: item of letsencrypt[i][domains] array
#
# So what we do is compare {{ domain }} to all lines of {{ dns_info }} relevant to the particular loop index i
# if its missing, it gets appended to generation_indexes array, and a corresponding letsencrypt-auto command 
# is appended to the generate_cmds array to be later displayed, or executed.

- name: "Generating letsencrypt commands"
  set_fact:
      generate_cmds: "{%- set generation_indexes = [] -%}
                      {%- for san_dict in letsencrypt -%}
                          {%- set i = loop.index0 -%}
                          {%- for domain in san_dict.domains -%}
                              {%- if domain not in dns_info.results[i].stdout_lines -%}
                                  {%- if i not in generation_indexes -%}{%- if generation_indexes.append(i) -%}{%- endif -%}{%- endif -%}
                              {%- endif -%}
                          {%- endfor -%}
                      {%- endfor -%}
                      {%- for i in generation_indexes -%}
                          {{ letsencrypt_path }}/letsencrypt-auto certonly --non-interactive --rsa-key-size {{ letsencrypt_rsa_key_size }} --agree-tos --expand --text --email {{ letsencrypt[i].email }}
                          {%- for domain in letsencrypt[i].domains -%}
                              {{ ' ' }}-d {{ domain }}
                          {%- endfor -%}
                          {{ ' ' }}
                          {%- if check_443.changed  and check_80.changed -%}
                              --standalone
                          {%- else -%}
                              --webroot --webroot-path {{ letsencrypt_webroot }}
                          {%- endif -%}
                          {{ '\n' if not loop.last else '' }}
                      {%- endfor -%}"
  tags: dontgen

- name: Showing cert generation commands
  debug: var=generate_cmds.stdout
  tags: dontgen

- name: Requesting certs
  shell: "{{ item.0 }}"
  when: "{{ item.0|length > 0 and item.1 == inventory_hostname }}"
  register: gen_result
  notify: reload nginx
  with_nested:
      - "{{ generate_cmds.split('\n') }}"
      - "{{ play_hosts if letsencrypt_group else [inventory_hostname] }}"
  
- name: Showing generation results
  debug: var={{ gen_result.results|map(attribute='stdout_lines')|list }}

- name: Putting letsencrypt cron job
  template: src=cron.d/letsencrypt.j2 dest=/etc/cron.d/letsencrypt
  tags: 
      - dontgen
      - cron
